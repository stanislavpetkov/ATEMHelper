/* -LICENSE-START-
** Copyright (c) 2016 Blackmagic Design
**
** Permission is hereby granted, free of charge, to any person or organization
** obtaining a copy of the software and accompanying documentation covered by
** this license (the "Software") to use, reproduce, display, distribute,
** execute, and transmit the Software, and to prepare derivative works of the
** Software, and to permit third-parties to whom the Software is furnished to
** do so, all subject to the following:
** 
** The copyright notices in the Software and this entire statement, including
** the above license grant, this restriction and the following disclaimer,
** must be included in all copies of the Software, in whole or in part, and
** all derivative works of the Software, unless such copies or derivative
** works are solely in the form of machine-executable object code generated by
** a source language processor.
** 
** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
** DEALINGS IN THE SOFTWARE.
** -LICENSE-END-
*/

/* BMDSwitcherAPI_v6_9.idl */

// Forward Declarations

interface IBMDSwitcherKeyFlyKeyFrameParameters_v6_9;
interface IBMDSwitcherKeyFlyParameters_v6_9;

/* Interface IBMDSwitcherKeyFlyKeyFrameParameters_v6_9 - Key Fly Frame Parameters */

[
    object,
    uuid(8F3A7FA5-6B08-4999-B446-B64E9CFA3E37),
    helpstring("Key Fly Frame Parameters")
] interface IBMDSwitcherKeyFlyKeyFrameParameters_v6_9 : IUnknown
{
    HRESULT GetSizeX([out] double* multiplierX);
    HRESULT SetSizeX([in] double multiplierX);
    HRESULT GetSizeY([out] double* multiplierY);
    HRESULT SetSizeY([in] double multiplierY);
    HRESULT GetPositionX([out] double* offsetX);
    HRESULT SetPositionX([in] double offsetX);
    HRESULT GetPositionY([out] double* offsetY);
    HRESULT SetPositionY([in] double offsetY);
    HRESULT GetRotation([out] double* degrees);
    HRESULT SetRotation([in] double degrees);
    HRESULT GetCanRotate([out] BOOL* canRotate);
    HRESULT GetBorderWidthOut([out] double* widthOut);
    HRESULT SetBorderWidthOut([in] double widthOut);
    HRESULT GetBorderWidthIn([out] double* widthIn);
    HRESULT SetBorderWidthIn([in] double widthIn);
    HRESULT GetBorderSoftnessOut([out] double* softOut);
    HRESULT SetBorderSoftnessOut([in] double softOut);
    HRESULT GetBorderSoftnessIn([out] double* softIn);
    HRESULT SetBorderSoftnessIn([in] double softIn);
    HRESULT GetBorderBevelSoftness([out] double* bevelSoft);
    HRESULT SetBorderBevelSoftness([in] double bevelSoft);
    HRESULT GetBorderBevelPosition([out] double* bevelPosition);
    HRESULT SetBorderBevelPosition([in] double bevelPosition);
    HRESULT GetBorderOpacity([out] double* opacity);
    HRESULT SetBorderOpacity([in] double opacity);
    HRESULT GetBorderHue([out] double* hue /* [0, 360) */);
    HRESULT SetBorderHue([in] double hue /* [0, 360) */);
    HRESULT GetBorderSaturation([out] double* sat);
    HRESULT SetBorderSaturation([in] double sat);
    HRESULT GetBorderLuma([out] double* luma);
    HRESULT SetBorderLuma([in] double luma);
    HRESULT GetBorderLightSourceDirection([out] double* degrees /* [0, 360) */);
    HRESULT SetBorderLightSourceDirection([in] double degrees /* [0, 360) */);
    HRESULT GetBorderLightSourceAltitude([out] double* altitude);
    HRESULT SetBorderLightSourceAltitude([in] double altitude);
    HRESULT GetMaskTop([out] double* top);
    HRESULT SetMaskTop([in] double top);
    HRESULT GetMaskBottom([out] double* bottom);
    HRESULT SetMaskBottom([in] double bottom);
    HRESULT GetMaskLeft([out] double* left);
    HRESULT SetMaskLeft([in] double left);
    HRESULT GetMaskRight([out] double* right);
    HRESULT SetMaskRight([in] double right);
    HRESULT AddCallback([in] IBMDSwitcherKeyFlyKeyFrameParametersCallback* callback);
    HRESULT RemoveCallback([in] IBMDSwitcherKeyFlyKeyFrameParametersCallback* callback);
};

/* Interface IBMDSwitcherKeyFlyParameters_v6_9 - Key Fly Parameters */

[
    object,
    uuid(4CA84EC1-5A83-4A9D-A37A-72D32CDF1201),
    helpstring("Key Fly Parameters")
] interface IBMDSwitcherKeyFlyParameters_v6_9 : IUnknown
{
    HRESULT GetFly([out] BOOL* isFlyKey);
    HRESULT SetFly([in] BOOL isFlyKey);
    HRESULT GetCanFly([out] BOOL* canFly);
    HRESULT GetRate([out] unsigned int* frames);
    HRESULT SetRate([in] unsigned int frames);
    HRESULT GetSizeX([out] double* multiplierX);
    HRESULT SetSizeX([in] double multiplierX);
    HRESULT GetSizeY([out] double* multiplierY);
    HRESULT SetSizeY([in] double multiplierY);
    HRESULT GetPositionX([out] double* offsetX);
    HRESULT SetPositionX([in] double offsetX);
    HRESULT GetPositionY([out] double* offsetY);
    HRESULT SetPositionY([in] double offsetY);
    HRESULT GetRotation([out] double* degrees);
    HRESULT SetRotation([in] double degrees);
    HRESULT GetCanRotate([out] BOOL* canRotate);
    HRESULT ResetRotation(void);
    HRESULT ResetDVE(void); // Resets all DVE parameters, excluding mask
    HRESULT ResetDVEFull(void); // Resets all DVE parameters to full screen, excluding mask
    HRESULT IsKeyFrameStored([in] BMDSwitcherFlyKeyFrame keyFrame, [out] BOOL* stored);
    HRESULT StoreAsKeyFrame([in] BMDSwitcherFlyKeyFrame keyFrame); // Stores current state into the specified Key Frame(s), only Key Frame A and/or B can be specified.
    HRESULT ClearKeyFrame([in] BMDSwitcherFlyKeyFrame keyFrame); // Clears the specified Key Frame(s), only Key Frame A and/or B can be specified.
    HRESULT RunToKeyFrame([in] BMDSwitcherFlyKeyFrame destination); // Can only specify 1 Key Frame destination
    HRESULT IsAtKeyFrames([out] BMDSwitcherFlyKeyFrame* keyFrames);
    HRESULT GetKeyFrameParameters([in] BMDSwitcherFlyKeyFrame keyFrame, [out] IBMDSwitcherKeyFlyKeyFrameParameters_v6_9** keyFrameParameters);
    HRESULT IsRunning([out] BOOL* isRunning, [out] BMDSwitcherFlyKeyFrame* destination);
    HRESULT AddCallback([in] IBMDSwitcherKeyFlyParametersCallback* callback);
    HRESULT RemoveCallback([in] IBMDSwitcherKeyFlyParametersCallback* callback);
};

/* Interface IBMDSwitcherTalkbackCallback_v6_9 - Talkback Object Callback */

[
    object,
    uuid(0B90E45D-E976-45E1-A8A2-0ED4EF102E46),
    helpstring("Talkback Object Callback")
] interface IBMDSwitcherTalkbackCallback_v6_9 : IUnknown
{
    HRESULT Notify([in] BMDSwitcherTalkbackEventType eventType);
};

/* Interface IBMDSwitcherTalkback_v6_9 - Talkback Object */

[
    object,
    uuid(43E40D41-ADDC-43D2-871F-7BDB322E9BAA),
    helpstring("Talkback Object")
] interface IBMDSwitcherTalkback_v6_9 : IUnknown
{
    HRESULT GetMuteSDI([out] BOOL* muteSDI);
    HRESULT SetMuteSDI([in] BOOL muteSDI);
    HRESULT AddCallback([in] IBMDSwitcherTalkbackCallback_v6_9* callback);
    HRESULT RemoveCallback([in] IBMDSwitcherTalkbackCallback_v6_9* callback);
};

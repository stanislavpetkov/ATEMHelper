/* -LICENSE-START-
** Copyright (c) 2020 Blackmagic Design
**
** Permission is hereby granted, free of charge, to any person or organization
** obtaining a copy of the software and accompanying documentation covered by
** this license (the "Software") to use, reproduce, display, distribute,
** execute, and transmit the Software, and to prepare derivative works of the
** Software, and to permit third-parties to whom the Software is furnished to
** do so, all subject to the following:
**
** The copyright notices in the Software and this entire statement, including
** the above license grant, this restriction and the following disclaimer,
** must be included in all copies of the Software, in whole or in part, and
** all derivative works of the Software, unless such copies or derivative
** works are solely in the form of machine-executable object code generated by
** a source language processor.
**
** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
** DEALINGS IN THE SOFTWARE.
** -LICENSE-END-
*/

/* BMDSwitcherAPI_v8_1_2.idl */

// Forward Declarations

interface IBMDSwitcher_v8_1_2;
interface IBMDSwitcherDiscovery_v8_1_2;
interface IBMDSwitcherMultiView_v8_1_2;
interface IBMDSwitcherMultiViewIterator_v8_1_2;

/* Interface IBMDSwitcher_v8_1_2 - Switcher Object */

[
    object,
    uuid(04ADE67B-27B1-48A7-80A3-553230C5046F),
    helpstring("Switcher Object v8.1.2")
] interface IBMDSwitcher_v8_1_2 : IUnknown
{
    HRESULT GetProductName ([out] BSTR* productName);
    HRESULT GetVideoMode ([out] BMDSwitcherVideoMode* videoMode);
    HRESULT SetVideoMode ([in] BMDSwitcherVideoMode videoMode);
    HRESULT DoesSupportVideoMode ([in] BMDSwitcherVideoMode videoMode, [out] BOOL* supported);
    HRESULT DoesVideoModeChangeRequireReconfiguration ([in] BMDSwitcherVideoMode videoMode, [out] BOOL* required);
    HRESULT GetMethodForDownConvertedSD ([out] BMDSwitcherDownConversionMethod* method);
    HRESULT SetMethodForDownConvertedSD ([in] BMDSwitcherDownConversionMethod method);
    HRESULT GetDownConvertedHDVideoMode ([in] BMDSwitcherVideoMode coreVideoMode, [out] BMDSwitcherVideoMode* downConvertedHDVideoMode);
    HRESULT SetDownConvertedHDVideoMode ([in] BMDSwitcherVideoMode coreVideoMode, [in] BMDSwitcherVideoMode downConvertedHDVideoMode);
    HRESULT DoesSupportDownConvertedHDVideoMode ([in] BMDSwitcherVideoMode coreVideoMode, [in] BMDSwitcherVideoMode downConvertedHDVideoMode, [out] BOOL* supported);
    HRESULT GetMultiViewVideoMode ([in] BMDSwitcherVideoMode coreVideoMode, [out] BMDSwitcherVideoMode* multiviewVideoMode);
    HRESULT SetMultiViewVideoMode ([in] BMDSwitcherVideoMode coreVideoMode, [in] BMDSwitcherVideoMode multiviewVideoMode);
    HRESULT DoesSupportMultiViewVideoMode ([in] BMDSwitcherVideoMode coreVideoMode, [in] BMDSwitcherVideoMode multiviewVideoMode, [out] BOOL* supported);
    HRESULT Get3GSDIOutputLevel ([out] BMDSwitcher3GSDIOutputLevel* outputLevel);
    HRESULT Set3GSDIOutputLevel ([in] BMDSwitcher3GSDIOutputLevel outputLevel);
    HRESULT GetPowerStatus ([out] BMDSwitcherPowerStatus* powerStatus);
    HRESULT GetTimeCode ([out] unsigned char* hours, [out] unsigned char* minutes, [out] unsigned char* seconds, [out] unsigned char* frames, [out] BOOL* dropFrame);
    HRESULT SetTimeCode ([in] unsigned char hours, [in] unsigned char minutes, [in] unsigned char seconds, [in] unsigned char frames);
    HRESULT RequestTimeCode (void);
    HRESULT GetTimeCodeLocked ([out] BOOL* timeCodeLocked);
    HRESULT GetAreOutputsConfigurable ([out] BOOL* configurable);
    HRESULT GetSuperSourceCascade ([out] BOOL* cascade);
    HRESULT SetSuperSourceCascade ([in] BOOL cascade);
    HRESULT SuspendStreaming ([in] unsigned int durationMs);
    HRESULT AllowStreamingToResume (void);
    HRESULT DoesSupportAutoVideoMode ([out] BOOL* supported);
    HRESULT GetAutoVideoMode ([out] BOOL* enabled);
    HRESULT GetAutoVideoModeDetected ([out] BOOL* detected);
    HRESULT SetAutoVideoMode ([in] BOOL enabled);
    HRESULT CreateIterator ([in] REFIID iid, [out] LPVOID* ppv);
    HRESULT AddCallback ([in] IBMDSwitcherCallback* callback);
    HRESULT RemoveCallback ([in] IBMDSwitcherCallback* callback);
};

/* Interface IBMDSwitcherDiscovery_v8_1_2 - Used to discover and connect to switchers */

[
    object,
    uuid(568FC291-CEB5-4A1E-95AC-43FDE5E91249),
    helpstring("Used to discover and connect to switchers v8.1.2")
] interface IBMDSwitcherDiscovery_v8_1_2 : IUnknown
{
    HRESULT ConnectTo ([in] BSTR deviceAddress, [out] IBMDSwitcher_v8_1_2** switcherDevice, [out] BMDSwitcherConnectToFailure* failReason);
};

importlib("stdole2.tlb");

[
    uuid(9119E903-A6D0-4C05-80EF-C322D654D6DD),
    helpstring("CBMDSwitcherDiscovery Class v8.1.2")
] coclass CBMDSwitcherDiscovery_v8_1_2
{
    [default] interface IBMDSwitcherDiscovery_v8_1_2;
};

/* Interface IBMDSwitcherMultiView_v8_1_2 - MultiView Object */

[
    object,
    uuid(BCFAAA0B-295B-4208-92D8-20BFEEF5B4D7),
    helpstring("MultiView Object v8.1.2")
] interface IBMDSwitcherMultiView_v8_1_2 : IUnknown
{
    HRESULT GetLayout ([out] BMDSwitcherMultiViewLayout* layout);
    HRESULT SetLayout ([in] BMDSwitcherMultiViewLayout layout);
    HRESULT SupportsQuadrantLayout ([out] BOOL* supportsQuadrantLayout);
    HRESULT GetWindowInput ([in] unsigned int window, [out] BMDSwitcherInputId* input);
    HRESULT SetWindowInput ([in] unsigned int window, [in] BMDSwitcherInputId input);
    HRESULT GetWindowCount ([out] unsigned int* windowCount);
    HRESULT GetInputAvailabilityMask ([out] BMDSwitcherInputAvailability* availabilityMask);
    HRESULT CanRouteInputs ([out] BOOL* canRoute);
    HRESULT SupportsVuMeters ([out] BOOL* supportsVuMeters);
    HRESULT CurrentInputSupportsVuMeter ([in] unsigned int window, [out] BOOL* supportsVuMeter);
    HRESULT GetVuMeterEnabled ([in] unsigned int window, [out] BOOL* enabled);
    HRESULT SetVuMeterEnabled ([in] unsigned int window, [in] BOOL enabled);
    HRESULT GetVuMeterOpacity ([out] double* opacity);
    HRESULT SetVuMeterOpacity ([in] double opacity);
    HRESULT CanToggleSafeAreaEnabled ([out] BOOL* canToggleSafeAreaEnabled);
    HRESULT CurrentInputSupportsSafeArea ([in] unsigned int window, [out] BOOL* supportsSafeArea);
    HRESULT GetSafeAreaEnabled ([in] unsigned int window, [out] BOOL* enabled);
    HRESULT SetSafeAreaEnabled ([in] unsigned int window, [in] BOOL enabled);
    HRESULT SupportsProgramPreviewSwap ([out] BOOL* supportsProgramPreviewSwap);
    HRESULT GetProgramPreviewSwapped ([out] BOOL* swapped);
    HRESULT SetProgramPreviewSwapped ([in] BOOL swapped);
    HRESULT AddCallback ([in] IBMDSwitcherMultiViewCallback* callback);
    HRESULT RemoveCallback ([in] IBMDSwitcherMultiViewCallback* callback);
};

/* Interface IBMDSwitcherMultiViewIterator_v8_1_2 - MultiView Iterator */

[
    object,
    uuid(6A5BCCD8-CCD8-4983-9E6A-5FEE666D0ACA),
    helpstring("MultiView Iterator v8.1.2")
] interface IBMDSwitcherMultiViewIterator_v8_1_2 : IUnknown
{
    HRESULT Next ([out] IBMDSwitcherMultiView_v8_1_2** multiView);
};

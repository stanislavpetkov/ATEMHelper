/* -LICENSE-START-
** Copyright (c) 2019 Blackmagic Design
**
** Permission is hereby granted, free of charge, to any person or organization
** obtaining a copy of the software and accompanying documentation covered by
** this license (the "Software") to use, reproduce, display, distribute,
** execute, and transmit the Software, and to prepare derivative works of the
** Software, and to permit third-parties to whom the Software is furnished to
** do so, all subject to the following:
**
** The copyright notices in the Software and this entire statement, including
** the above license grant, this restriction and the following disclaimer,
** must be included in all copies of the Software, in whole or in part, and
** all derivative works of the Software, unless such copies or derivative
** works are solely in the form of machine-executable object code generated by
** a source language processor.
**
** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
** DEALINGS IN THE SOFTWARE.
** -LICENSE-END-
*/

/* BMDSwitcherAPI_v8_1.idl */

// Forward Declarations

interface IBMDSwitcherFairlightAudioInputXLRCallback_v8_1;
interface IBMDSwitcherFairlightAudioInputXLR_v8_1;

/* Enum BMDSwitcherFairlightAudioInputXLREventType_v8_1 - Used in IBMDSwitcherFairlightAudioInputXLRCallback_v8_1 */

typedef [v1_enum] enum _BMDSwitcherFairlightAudioInputXLREventType_v8_1 {
	bmdSwitcherFairlightAudioInputXLREventTypeRCAToXLREnabledChanged_v8_1 = /* 'rtxC' */ 0x72747843
} BMDSwitcherFairlightAudioInputXLREventType_v8_1;

/* Interface IBMDSwitcherFairlightAudioInputXLRCallback_v8_1 - Fairlight Audio Input XLR Object Callback */

[
	object,
	uuid(64F0DCA8-CEF4-4C72-AC24-D7BB7DF38737),
	helpstring("Fairlight Audio Input XLR Object Callback v8.1")
] interface IBMDSwitcherFairlightAudioInputXLRCallback_v8_1 : IUnknown
{
	HRESULT Notify ([in] BMDSwitcherFairlightAudioInputXLREventType_v8_1 eventType);
};

/* Interface IBMDSwitcherFairlightAudioInputXLR_v8_1 - Fairlight Audio Input XLR Object */

[
	object,
	uuid(CD9FE826-776E-44F6-A508-EF7DFAA9E5F8),
	helpstring("Fairlight Audio Input XLR Object v8.1")
] interface IBMDSwitcherFairlightAudioInputXLR_v8_1 : IUnknown
{
	HRESULT HasRCAToXLR ([out] BOOL* hasRcaToXlr);
	HRESULT GetRCAToXLREnabled ([out] BOOL* rcaToXlrEnabled);
	HRESULT SetRCAToXLREnabled ([in] BOOL rcaToXlrEnabled);
	HRESULT AddCallback ([in] IBMDSwitcherFairlightAudioInputXLRCallback_v8_1* callback);
	HRESULT RemoveCallback ([in] IBMDSwitcherFairlightAudioInputXLRCallback_v8_1* callback);
};

/* Interface IBMDSwitcherMediaPool_v8_1 - Frame Pool for Media Players */

[
    object,
    uuid(59A3056E-7B62-46F0-8B78-1FB149F7372C),
    helpstring("Frame Pool for Media Players")
] interface IBMDSwitcherMediaPool_v8_1 : IUnknown
{
    HRESULT GetStills ([out] IBMDSwitcherStills** stills);
    HRESULT GetClip ([in] unsigned int clipIndex, [out] IBMDSwitcherClip** clip);
    HRESULT GetClipCount ([out] unsigned int* clipCount);
    HRESULT CreateFrame ([in] BMDSwitcherPixelFormat pixelFormat, [in] unsigned int width, [in] unsigned int height, [out] IBMDSwitcherFrame** frame);
    HRESULT CreateAudio ([in] unsigned int sizeBytes, [out] IBMDSwitcherAudio** audio);
    HRESULT GetFrameTotalForClips ([out] unsigned int* total);
    HRESULT GetClipMaxFrameCounts ([in] unsigned int clipCount, [out] unsigned int* clipMaxFrameCounts);	// one array element per clip, each element holds the maximum frame count
    HRESULT SetClipMaxFrameCounts ([in] unsigned int clipCount, [in] const unsigned int* clipMaxFrameCounts);	// one array element per clip, each element holds the maximum frame count
    HRESULT Clear (void);	// clears all stills, clips and clip audio
    HRESULT AddCallback ([in] IBMDSwitcherMediaPoolCallback* callback);
    HRESULT RemoveCallback ([in] IBMDSwitcherMediaPoolCallback* callback);
};


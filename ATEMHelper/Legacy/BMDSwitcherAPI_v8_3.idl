/* -LICENSE-START-
** Copyright (c) 2020 Blackmagic Design
**
** Permission is hereby granted, free of charge, to any person or organization
** obtaining a copy of the software and accompanying documentation covered by
** this license (the "Software") to use, reproduce, display, distribute,
** execute, and transmit the Software, and to prepare derivative works of the
** Software, and to permit third-parties to whom the Software is furnished to
** do so, all subject to the following:
**
** The copyright notices in the Software and this entire statement, including
** the above license grant, this restriction and the following disclaimer,
** must be included in all copies of the Software, in whole or in part, and
** all derivative works of the Software, unless such copies or derivative
** works are solely in the form of machine-executable object code generated by
** a source language processor.
**
** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
** DEALINGS IN THE SOFTWARE.
** -LICENSE-END-
*/

/* BMDSwitcherAPI_v8_3.idl */

// Forward Declarations

interface IBMDSwitcherRecordAV_v8_3;
interface IBMDSwitcherRecordDiskIterator_v8_3;
interface IBMDSwitcherRecordDisk_v8_3;

/* Interface IBMDSwitcherRecordAV_v8_3 - Switcher RecordAV Object */

[
    object,
    uuid(EDABB9AE-E070-4CD8-A73C-424AFC886483),
    helpstring("Switcher RecordAV Object v8.3")
] interface IBMDSwitcherRecordAV_v8_3 : IUnknown
{
    HRESULT StartRecording (void);
    HRESULT StopRecording (void);
    HRESULT SwitchDisk (void);
    HRESULT IsRecording ([out] BOOL* recording);
    HRESULT GetStatus ([out] BMDSwitcherRecordAVState* state, [out] BMDSwitcherRecordAVError* error);
    HRESULT SetFilename ([in] BSTR filename);
    HRESULT GetFilename ([out] BSTR* filename);
    HRESULT SetRecordInAllCameras ([in] BOOL recordInAllCameras);
    HRESULT GetRecordInAllCameras ([out] BOOL* recordInAllCameras);
    HRESULT GetWorkingSetLimit ([out] unsigned int* workingSetLimit);
    HRESULT SetWorkingSetDisk ([in] unsigned int workingSetIndex, [in] BMDSwitcherRecordDiskId diskId);
    HRESULT GetWorkingSetDisk ([in] unsigned int workingSetIndex, [in] BMDSwitcherRecordDiskId* diskId);
    HRESULT GetActiveDiskIndex ([out] unsigned int* workingSetIndex);
    HRESULT RequestDuration (void);
    HRESULT GetDuration ([out] unsigned char* hours, [out] unsigned char* minutes, [out] unsigned char* seconds, [out] unsigned char* frames, [out] BOOL* dropFrame);
    HRESULT GetTotalRecordingTimeAvailable ([out] unsigned int* totalRecordingTimeAvailable);
    HRESULT CreateIterator ([in] REFIID iid, [out] LPVOID* ppv);
    HRESULT AddCallback ([in] IBMDSwitcherRecordAVCallback* callback);
    HRESULT RemoveCallback ([in] IBMDSwitcherRecordAVCallback* callback);
};

/* Interface IBMDSwitcherRecordDiskIterator_v8_3 - RecordDisk Iterator */

[
    object,
    uuid(17AAAD91-A792-4786-BC46-AF02F87194DA),
    helpstring("RecordDisk Iterator v8.3")
] interface IBMDSwitcherRecordDiskIterator_v8_3 : IUnknown
{
    HRESULT Next ([out] IBMDSwitcherRecordDisk_v8_3** recordDisk);
    HRESULT GetById ([in] BMDSwitcherRecordDiskId diskId, [out] IBMDSwitcherRecordDisk_v8_3** disk);
};

/* Interface IBMDSwitcherRecordDisk_v8_3 - Switcher RecordDisk Object */

[
    object,
    uuid(CE5A81E6-9418-4DB5-99BF-2832ECE9ECBD),
    helpstring("Switcher RecordDisk Object v8.3")
] interface IBMDSwitcherRecordDisk_v8_3 : IUnknown
{
    HRESULT GetVideoId ([out] BMDSwitcherRecordDiskId* diskId);
    HRESULT GetVolumeName ([out] BSTR* volumeName);
    HRESULT GetRecordingTimeAvailable ([out] unsigned int* recordingTimeAvailable);
    HRESULT GetStatus ([out] BMDSwitcherRecordDiskStatus* diskStatus);
    HRESULT RequestRecordingTimeAvailable (void);
    HRESULT AddCallback ([in] IBMDSwitcherRecordDiskCallback* callback);
    HRESULT RemoveCallback ([in] IBMDSwitcherRecordDiskCallback* callback);
};

/* Interface IBMDSwitcherStreamRTMP_v8_3 - Switcher Stream RTMP Object */

[
    object,
    uuid(AF7170E6-CBEB-4682-8511-8D2C6B2A2241),
    helpstring("Switcher Stream RTMP Object v8.3")
] interface IBMDSwitcherStreamRTMP_v8_3 : IUnknown
{
    HRESULT StartStreaming (void);
    HRESULT StopStreaming (void);
    HRESULT IsStreaming ([out] BOOL* streaming);
    HRESULT GetStatus ([out] BMDSwitcherStreamRTMPState* state, [out] BMDSwitcherStreamRTMPError* error);
    HRESULT SetServiceName ([in] BSTR serviceName);
    HRESULT GetServiceName ([out] BSTR* serviceName);
    HRESULT SetUrl ([in] BSTR url);
    HRESULT GetUrl ([out] BSTR* url);
    HRESULT SetKey ([in] BSTR url);
    HRESULT GetKey ([out] BSTR* key);
    HRESULT SetBitrates ([in] unsigned int lowBitrate, [in] unsigned int highBitrate);
    HRESULT GetBitrates ([out] unsigned int* lowBitRate, [out] unsigned int* highBitRate);
    HRESULT RequestDuration (void);
    HRESULT GetDuration ([out] unsigned char* hours, [out] unsigned char* minutes, [out] unsigned char* seconds, [out] unsigned char* frames, [out] BOOL* dropFrame);
    HRESULT GetEncodingBitrate ([out] unsigned int* encodingBitrate);
    HRESULT GetCacheUsed ([out] double* cacheUsed);
    HRESULT AddCallback ([in] IBMDSwitcherStreamRTMPCallback* callback);
    HRESULT RemoveCallback ([in] IBMDSwitcherStreamRTMPCallback* callback);
};

/* -LICENSE-START-
** Copyright (c) 2019 Blackmagic Design
**
** Permission is hereby granted, free of charge, to any person or organization
** obtaining a copy of the software and accompanying documentation covered by
** this license (the "Software") to use, reproduce, display, distribute,
** execute, and transmit the Software, and to prepare derivative works of the
** Software, and to permit third-parties to whom the Software is furnished to
** do so, all subject to the following:
** 
** The copyright notices in the Software and this entire statement, including
** the above license grant, this restriction and the following disclaimer,
** must be included in all copies of the Software, in whole or in part, and
** all derivative works of the Software, unless such copies or derivative
** works are solely in the form of machine-executable object code generated by
** a source language processor.
** 
** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
** DEALINGS IN THE SOFTWARE.
** -LICENSE-END-
*/

/* BMDSwitcherAPI_v8_0_3.idl */

// Forward Declarations

interface IBMDSwitcher_v8_0_3;
interface IBMDSwitcherDiscovery_v8_0_3;

/* Interface IBMDSwitcher_v8_0_3 - Switcher Object */

[
    object,
    uuid(7F2BD565-4B02-4DF5-B8AC-A31ED8285057),
    helpstring("Switcher Object v8.03")
] interface IBMDSwitcher_v8_0_3 : IUnknown
{
    HRESULT GetProductName([out] BSTR* productName);
    HRESULT GetVideoMode([out] BMDSwitcherVideoMode* videoMode);
    HRESULT SetVideoMode([in] BMDSwitcherVideoMode videoMode);
    HRESULT DoesSupportVideoMode([in] BMDSwitcherVideoMode videoMode, [out] BOOL* supported);
    HRESULT DoesVideoModeChangeRequireReconfiguration([in] BMDSwitcherVideoMode videoMode, [out] BOOL* required);
    HRESULT GetMethodForDownConvertedSD([out] BMDSwitcherDownConversionMethod* method);
    HRESULT SetMethodForDownConvertedSD([in] BMDSwitcherDownConversionMethod method);
    HRESULT GetDownConvertedHDVideoMode([in] BMDSwitcherVideoMode coreVideoMode, [out] BMDSwitcherVideoMode* downConvertedHDVideoMode);
    HRESULT SetDownConvertedHDVideoMode([in] BMDSwitcherVideoMode coreVideoMode, [in] BMDSwitcherVideoMode downConvertedHDVideoMode);
    HRESULT DoesSupportDownConvertedHDVideoMode([in] BMDSwitcherVideoMode coreVideoMode, [in] BMDSwitcherVideoMode downConvertedHDVideoMode, [out] BOOL* supported);
    HRESULT GetMultiViewVideoMode([in] BMDSwitcherVideoMode coreVideoMode, [out] BMDSwitcherVideoMode* multiviewVideoMode);
    HRESULT SetMultiViewVideoMode([in] BMDSwitcherVideoMode coreVideoMode, [in] BMDSwitcherVideoMode multiviewVideoMode);
    HRESULT DoesSupportMultiViewVideoMode([in] BMDSwitcherVideoMode coreVideoMode, [in] BMDSwitcherVideoMode multiviewVideoMode, [out] BOOL* supported);
    HRESULT Get3GSDIOutputLevel([out] BMDSwitcher3GSDIOutputLevel* outputLevel);
    HRESULT Set3GSDIOutputLevel([in] BMDSwitcher3GSDIOutputLevel outputLevel);
    HRESULT GetPowerStatus([out] BMDSwitcherPowerStatus* powerStatus);
    HRESULT GetTimeCode([out] unsigned char* hours, [out] unsigned char* minutes, [out] unsigned char* seconds, [out] unsigned char* frames, [out] BOOL* dropFrame);
    HRESULT SetTimeCode([in] unsigned char hours, [in] unsigned char minutes, [in] unsigned char seconds, [in] unsigned char frames);
    HRESULT RequestTimeCode(void);
    HRESULT GetTimeCodeLocked([out] BOOL* timeCodeLocked);
    HRESULT GetAreOutputsConfigurable([out] BOOL* configurable);
    HRESULT GetSuperSourceCascade([out] BOOL* cascade);
    HRESULT SetSuperSourceCascade([in] BOOL cascade);
    HRESULT CreateIterator([in] REFIID iid, [out] LPVOID* ppv);
    HRESULT AddCallback([in] IBMDSwitcherCallback* callback);
    HRESULT RemoveCallback([in] IBMDSwitcherCallback* callback);
};

/* Interface IBMDSwitcherDiscovery_v8_0_3 - Used to discover and connect to switchers */

[
    object,
    uuid(513CCE8E-D385-4EE5-96CA-836070AC7CC2),
    helpstring("Used to discover and connect to switchers v8.03")
] interface IBMDSwitcherDiscovery_v8_0_3 : IUnknown
{
    HRESULT ConnectTo([in] BSTR deviceAddress, [out] IBMDSwitcher_v8_0_3** switcherDevice, [out] BMDSwitcherConnectToFailure* failReason);
};


importlib("stdole2.tlb");

[
    uuid(449345CB-64CE-4DF0-AFEE-18C60A0ABE46),
    helpstring("CBMDSwitcherDiscovery Class v8.03")
] coclass CBMDSwitcherDiscovery_v8_0_3
{
    [default] interface IBMDSwitcherDiscovery_v8_0_3;
};


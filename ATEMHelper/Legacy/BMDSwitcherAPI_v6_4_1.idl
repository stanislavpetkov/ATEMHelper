/* -LICENSE-START-
** Copyright (c) 2015 Blackmagic Design
**
** Permission is hereby granted, free of charge, to any person or organization
** obtaining a copy of the software and accompanying documentation covered by
** this license (the "Software") to use, reproduce, display, distribute,
** execute, and transmit the Software, and to prepare derivative works of the
** Software, and to permit third-parties to whom the Software is furnished to
** do so, all subject to the following:
**
** The copyright notices in the Software and this entire statement, including
** the above license grant, this restriction and the following disclaimer,
** must be included in all copies of the Software, in whole or in part, and
** all derivative works of the Software, unless such copies or derivative
** works are solely in the form of machine-executable object code generated by
** a source language processor.
**
** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
** DEALINGS IN THE SOFTWARE.
** -LICENSE-END-
*/


/* BMDSwitcherAPI_v6_4_1.idl */

/* Enum BMDSwitcherEventType_v6_4_1 - IBMDSwitcher_v6_4_1 event type */

typedef [v1_enum] enum	_BMDSwitcherEventType_v6_4_1 {
    bmdSwitcherEventTypeVideoModeChanged_v6_4_1                   = /* 'sevd' */ 0x73657664,
    bmdSwitcherEventTypeDownConverterModeChanged_v6_4_1           = /* 'sedc' */ 0x73656463,
    bmdSwitcherEventTypePowerStatusChanged_v6_4_1                 = /* 'sepw' */ 0x73657077,
    bmdSwitcherEventTypeDisconnected_v6_4_1                       = /* 'sedi' */ 0x73656469
} BMDSwitcherEventType_v6_4_1;

/* Enum BMDSwitcherDownConverterMode_v6_4_1 - Down convert mode used when converting 16:9 -> 4:3 */

typedef [v1_enum] enum	_BMDSwitcherDownConverterMode_v6_4_1 {
    bmdSwitcherDownConverterModeCentreCut_v6_4_1                 = /* 'dccc' */ 0x64636363,
    bmdSwitcherDownConverterModeLetterbox_v6_4_1                 = /* 'dclb' */ 0x64636C62,
    bmdSwitcherDownConverterModeAnamorphic_v6_4_1                = /* 'dcam' */ 0x6463616D
} BMDSwitcherDownConverterMode_v6_4_1;

// Forward Declarations

interface IBMDSwitcherCallback_v6_4_1;
interface IBMDSwitcher_v6_4_1;
interface IBMDSwitcherDiscovery_v6_4_1;

/* Interface IBMDSwitcherCallback_v6_4_1 - Switcher Callback Delegate */

[
    object,
    uuid(6122F290-8003-4CDB-9493-54BD3FBCD3A1),
    helpstring("Switcher Callback Delegate")
] interface IBMDSwitcherCallback_v6_4_1 : IUnknown
{
    HRESULT Notify([in] BMDSwitcherEventType_v6_4_1 eventType);
};

/* Interface IBMDSwitcher_v6_4_1 - Switcher Object */

[
    object,
	uuid(13772940-59AE-4F4A-A4E4-0BD12F56C791),
    helpstring("Switcher Object")
] interface IBMDSwitcher_v6_4_1 : IUnknown
{
    HRESULT GetProductName([out] BSTR* productName);
    HRESULT GetVideoMode([out] BMDSwitcherVideoMode* videoMode);
    HRESULT SetVideoMode([in] BMDSwitcherVideoMode videoMode);
    HRESULT GetDownConverterMode([out] BMDSwitcherDownConverterMode_v6_4_1* downConverterMode);
    HRESULT SetDownConverterMode([in] BMDSwitcherDownConverterMode_v6_4_1 downConverterMode);
    HRESULT GetPowerStatus([out] BMDSwitcherPowerStatus* powerStatus);
    HRESULT DoesSupportVideoMode([in] BMDSwitcherVideoMode videoMode, [out] BOOL* supported);
    HRESULT CreateIterator([in] REFIID iid, [out] LPVOID* ppv);
    HRESULT AddCallback([in] IBMDSwitcherCallback_v6_4_1* callback);
    HRESULT RemoveCallback([in] IBMDSwitcherCallback_v6_4_1* callback);
};

/* Interface IBMDSwitcherDiscovery_v6_4_1 - Used to discover and connect to switchers */

[
	object,
	uuid(0283B116-8CE0-4F86-A1FD-D25EAD2F1A00),
	helpstring("Used to discover and connect to switchers")
] interface IBMDSwitcherDiscovery_v6_4_1 : IUnknown
{
	HRESULT ConnectTo([in] BSTR deviceAddress, [out] IBMDSwitcher_v6_4_1** switcherDevice, [out] BMDSwitcherConnectToFailure* failReason);
};

/* Coclasses */

importlib("stdole2.tlb");

[
	uuid(C9F0A63F-69C5-40FD-84F6-A8632B0D65D6),
	helpstring("CBMDSwitcherDiscovery_v6_4_1 Class")
] coclass CBMDSwitcherDiscovery_v6_4_1
{
	[default] interface IBMDSwitcherDiscovery_v6_4_1;
};

/* -LICENSE-START-
** Copyright (c) 2016 Blackmagic Design
**
** Permission is hereby granted, free of charge, to any person or organization
** obtaining a copy of the software and accompanying documentation covered by
** this license (the "Software") to use, reproduce, display, distribute,
** execute, and transmit the Software, and to prepare derivative works of the
** Software, and to permit third-parties to whom the Software is furnished to
** do so, all subject to the following:
** 
** The copyright notices in the Software and this entire statement, including
** the above license grant, this restriction and the following disclaimer,
** must be included in all copies of the Software, in whole or in part, and
** all derivative works of the Software, unless such copies or derivative
** works are solely in the form of machine-executable object code generated by
** a source language processor.
** 
** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
** DEALINGS IN THE SOFTWARE.
** -LICENSE-END-
*/


/* BMDSwitcherAPI_v6_7.idl */

// Forward Declarations

interface IBMDSwitcherKeyFlyKeyFrameParameters_v6_7;
interface IBMDSwitcherKeyFlyParameters_v6_7;
interface IBMDSwitcherTransitionDVEParameters_v6_7;
interface IBMDSwitcher_v6_7;
interface IBMDSwitcherDiscovery_v6_7;

/* Interface IBMDSwitcherKeyFlyKeyFrameParameters_v6_7 - Key Fly Frame Parameters */

[
	object,
	uuid(A6B8530A-B0C3-4304-8172-6D5ED93989B1),
	helpstring("Key Fly Frame Parameters")
] interface IBMDSwitcherKeyFlyKeyFrameParameters_v6_7 : IUnknown
{
	HRESULT GetSizeX([out] double* multiplierX);
	HRESULT SetSizeX([in] double multiplierX);
	HRESULT GetSizeY([out] double* multiplierY);
	HRESULT SetSizeY([in] double multiplierY);
	HRESULT GetPositionX([out] double* offsetX);
	HRESULT SetPositionX([in] double offsetX);
	HRESULT GetPositionY([out] double* offsetY);
	HRESULT SetPositionY([in] double offsetY);
	HRESULT GetRotation([out] double* degrees);
	HRESULT SetRotation([in] double degrees);
	HRESULT GetBorderWidthOut([out] double* widthOut);
	HRESULT SetBorderWidthOut([in] double widthOut);
	HRESULT GetBorderWidthIn([out] double* widthIn);
	HRESULT SetBorderWidthIn([in] double widthIn);
	HRESULT GetBorderSoftnessOut([out] double* softOut);
	HRESULT SetBorderSoftnessOut([in] double softOut);
	HRESULT GetBorderSoftnessIn([out] double* softIn);
	HRESULT SetBorderSoftnessIn([in] double softIn);
	HRESULT GetBorderBevelSoftness([out] double* bevelSoft);
	HRESULT SetBorderBevelSoftness([in] double bevelSoft);
	HRESULT GetBorderBevelPosition([out] double* bevelPosition);
	HRESULT SetBorderBevelPosition([in] double bevelPosition);
	HRESULT GetBorderOpacity([out] double* opacity);
	HRESULT SetBorderOpacity([in] double opacity);
	HRESULT GetBorderHue([out] double* hue /* [0, 360) */);
	HRESULT SetBorderHue([in] double hue /* [0, 360) */);
	HRESULT GetBorderSaturation([out] double* sat);
	HRESULT SetBorderSaturation([in] double sat);
	HRESULT GetBorderLuma([out] double* luma);
	HRESULT SetBorderLuma([in] double luma);
	HRESULT GetBorderLightSourceDirection([out] double* degrees /* [0, 360) */);
	HRESULT SetBorderLightSourceDirection([in] double degrees /* [0, 360) */);
	HRESULT GetBorderLightSourceAltitude([out] double* altitude);
	HRESULT SetBorderLightSourceAltitude([in] double altitude);
	HRESULT GetMaskTop([out] double* top);
	HRESULT SetMaskTop([in] double top);
	HRESULT GetMaskBottom([out] double* bottom);
	HRESULT SetMaskBottom([in] double bottom);
	HRESULT GetMaskLeft([out] double* left);
	HRESULT SetMaskLeft([in] double left);
	HRESULT GetMaskRight([out] double* right);
	HRESULT SetMaskRight([in] double right);
	HRESULT AddCallback([in] IBMDSwitcherKeyFlyKeyFrameParametersCallback* callback);
	HRESULT RemoveCallback([in] IBMDSwitcherKeyFlyKeyFrameParametersCallback* callback);
};

/* Interface IBMDSwitcherKeyFlyParameters_v6_7 - Key Fly Parameters */

[
    object,
    uuid(BB1D2964-F55B-491E-9C5D-8E43304C34FD),
    helpstring("Key Fly Parameters")
] interface IBMDSwitcherKeyFlyParameters_v6_7 : IUnknown
{
    HRESULT GetFly([out] BOOL* isFlyKey);
    HRESULT SetFly([in] BOOL isFlyKey);
    HRESULT GetCanFly([out] BOOL* canFly);
    HRESULT GetRate([out] unsigned int* frames);
    HRESULT SetRate([in] unsigned int frames);
    HRESULT GetSizeX([out] double* multiplierX);
    HRESULT SetSizeX([in] double multiplierX);
    HRESULT GetSizeY([out] double* multiplierY);
    HRESULT SetSizeY([in] double multiplierY);
    HRESULT GetPositionX([out] double* offsetX);
    HRESULT SetPositionX([in] double offsetX);
    HRESULT GetPositionY([out] double* offsetY);
    HRESULT SetPositionY([in] double offsetY);
    HRESULT GetRotation([out] double* degrees);
    HRESULT SetRotation([in] double degrees);
    HRESULT ResetRotation(void);
    HRESULT ResetDVE(void); // Resets all DVE parameters, excluding mask
    HRESULT ResetDVEFull(void); // Resets all DVE parameters to full screen, excluding mask
    HRESULT IsKeyFrameStored([in] BMDSwitcherFlyKeyFrame keyFrame, [out] BOOL* stored);
    HRESULT StoreAsKeyFrame([in] BMDSwitcherFlyKeyFrame keyFrame); // Stores current state into the specified Key Frame(s), only Key Frame A and/or B can be specified.
    HRESULT ClearKeyFrame([in] BMDSwitcherFlyKeyFrame keyFrame); // Clears the specified Key Frame(s), only Key Frame A and/or B can be specified.
    HRESULT RunToKeyFrame([in] BMDSwitcherFlyKeyFrame destination); // Can only specify 1 Key Frame destination
    HRESULT IsAtKeyFrames([out] BMDSwitcherFlyKeyFrame* keyFrames);
	HRESULT GetKeyFrameParameters([in] BMDSwitcherFlyKeyFrame keyFrame, [out] IBMDSwitcherKeyFlyKeyFrameParameters_v6_7** keyFrameParameters);
    HRESULT IsRunning([out] BOOL* isRunning, [out] BMDSwitcherFlyKeyFrame* destination);
    HRESULT AddCallback([in] IBMDSwitcherKeyFlyParametersCallback* callback);
    HRESULT RemoveCallback([in] IBMDSwitcherKeyFlyParametersCallback* callback);
};

/* Interface IBMDSwitcherTransitionDVEParameters_v6_7 - Transition DVE Parameters */

[
    object,
    uuid(CAA10B02-F7CB-47A6-97DA-C71DEF172712),
    helpstring("Transition DVE Parameters")
] interface IBMDSwitcherTransitionDVEParameters_v6_7 : IUnknown
{
    HRESULT GetRate([out] unsigned int* frames);
    HRESULT SetRate([in] unsigned int frames);
    HRESULT GetLogoRate([out] unsigned int* frames);
    HRESULT SetLogoRate([in] unsigned int frames);
    HRESULT GetReverse([out] BOOL* reverse);
    HRESULT SetReverse([in] BOOL reverse);
    HRESULT GetFlipFlop([out] BOOL* flipflop);
    HRESULT SetFlipFlop([in] BOOL flipflop);
    HRESULT GetStyle([out] BMDSwitcherDVETransitionStyle* style);
    HRESULT SetStyle([in] BMDSwitcherDVETransitionStyle style);
    HRESULT GetInputFill([out] BMDSwitcherInputId* input);
    HRESULT SetInputFill([in] BMDSwitcherInputId input);
    HRESULT GetInputCut([out] BMDSwitcherInputId* input);
    HRESULT SetInputCut([in] BMDSwitcherInputId input);
    HRESULT GetFillInputAvailabilityMask([out] BMDSwitcherInputAvailability* mask);
    HRESULT GetCutInputAvailabilityMask([out] BMDSwitcherInputAvailability* mask);
    HRESULT GetEnableKey([out] BOOL* enableKey);
    HRESULT SetEnableKey([in] BOOL enableKey);
    HRESULT GetPreMultiplied([out] BOOL* preMultiplied);
    HRESULT SetPreMultiplied([in] BOOL preMultiplied);
    HRESULT GetClip([out] double* clip);
    HRESULT SetClip([in] double clip);
    HRESULT GetGain([out] double* gain);
    HRESULT SetGain([in] double gain);
    HRESULT GetInverse([out] BOOL* inverse);
    HRESULT SetInverse([in] BOOL inverse);
    HRESULT AddCallback([in] IBMDSwitcherTransitionDVEParametersCallback* callback);
    HRESULT RemoveCallback([in] IBMDSwitcherTransitionDVEParametersCallback* callback);
};

/* Interface IBMDSwitcher_v6_7 - Switcher Object */

[
    object,
    uuid(38A89278-D0EF-499A-A73F-464C8F9C866E),
    helpstring("Switcher Object")
] interface IBMDSwitcher_v6_7 : IUnknown
{
    HRESULT GetProductName([out] BSTR* productName);
    HRESULT GetVideoMode([out] BMDSwitcherVideoMode* videoMode);
    HRESULT SetVideoMode([in] BMDSwitcherVideoMode videoMode);
    HRESULT DoesSupportVideoMode([in] BMDSwitcherVideoMode videoMode, [out] BOOL* supported);
    HRESULT GetMethodForDownConvertedSD([out] BMDSwitcherDownConversionMethod* method);
    HRESULT SetMethodForDownConvertedSD([in] BMDSwitcherDownConversionMethod method);
    HRESULT GetDownConvertedHDVideoMode([in] BMDSwitcherVideoMode coreVideoMode, [out] BMDSwitcherVideoMode* downConvertedHDVideoMode);
    HRESULT SetDownConvertedHDVideoMode([in] BMDSwitcherVideoMode coreVideoMode, [in] BMDSwitcherVideoMode downConvertedHDVideoMode);
    HRESULT DoesSupportDownConvertedHDVideoMode([in] BMDSwitcherVideoMode coreVideoMode, [in] BMDSwitcherVideoMode downConvertedHDVideoMode, [out] BOOL* supported);
    HRESULT GetMultiViewVideoMode([in] BMDSwitcherVideoMode coreVideoMode, [out] BMDSwitcherVideoMode* multiviewVideoMode);
    HRESULT SetMultiViewVideoMode([in] BMDSwitcherVideoMode coreVideoMode, [in] BMDSwitcherVideoMode multiviewVideoMode);
    HRESULT DoesSupportMultiViewVideoMode([in] BMDSwitcherVideoMode coreVideoMode, [in] BMDSwitcherVideoMode multiviewVideoMode, [out] BOOL* supported);
    HRESULT GetPowerStatus([out] BMDSwitcherPowerStatus* powerStatus);
    HRESULT CreateIterator([in] REFIID iid, [out] LPVOID* ppv);
    HRESULT AddCallback([in] IBMDSwitcherCallback* callback);
    HRESULT RemoveCallback([in] IBMDSwitcherCallback* callback);
};

/* Interface IBMDSwitcherDiscovery_v6_7 - Used to discover and connect to switchers */

[
    object,
    uuid(EB3FEF99-8561-4836-97B7-E5C768880D2A),
    helpstring("Used to discover and connect to switchers")
] interface IBMDSwitcherDiscovery_v6_7 : IUnknown
{
	HRESULT ConnectTo([in] BSTR deviceAddress, [out] IBMDSwitcher_v6_7** switcherDevice, [out] BMDSwitcherConnectToFailure* failReason);
};

/* Coclasses */

importlib("stdole2.tlb");

[
    uuid(49895038-FB6D-4AF7-A637-7A92F09F8655),
	helpstring("CBMDSwitcherDiscovery_v6_7 Class")
] coclass CBMDSwitcherDiscovery_v6_7
{
	[default] interface IBMDSwitcherDiscovery_v6_7;
};

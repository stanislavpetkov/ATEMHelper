/* -LICENSE-START-
** Copyright (c) 2013 Blackmagic Design
**
** Permission is hereby granted, free of charge, to any person or organization
** obtaining a copy of the software and accompanying documentation covered by
** this license (the "Software") to use, reproduce, display, distribute,
** execute, and transmit the Software, and to prepare derivative works of the
** Software, and to permit third-parties to whom the Software is furnished to
** do so, all subject to the following:
** 
** The copyright notices in the Software and this entire statement, including
** the above license grant, this restriction and the following disclaimer,
** must be included in all copies of the Software, in whole or in part, and
** all derivative works of the Software, unless such copies or derivative
** works are solely in the form of machine-executable object code generated by
** a source language processor.
** 
** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
** DEALINGS IN THE SOFTWARE.
** -LICENSE-END-
*/


/* BMDSwitcherAPI_v4_1_3.idl */

// Forward Declarations

interface IBMDSwitcherTransitionDVEParameters_v4_1_3;
interface IBMDSwitcherKey_v4_1_3;
interface IBMDSwitcherKeyIterator_v4_1_3;
interface IBMDSwitcherInputSuperSource_v4_1_3;
interface IBMDSwitcherDownstreamKey_v4_1_3;
interface IBMDSwitcherDownstreamKeyIterator_v4_1_3;
interface IBMDSwitcherInputSuperSourceCallback_v7_5_2;

/* Interface IBMDSwitcherTransitionDVEParameters_v4_1_3 - Transition DVE Parameters */

[
    object,
    uuid(31CA3097-D178-4398-B041-059C1312F129),
    helpstring("Transition DVE Parameters")
] interface IBMDSwitcherTransitionDVEParameters_v4_1_3 : IUnknown
{
    HRESULT GetRate([out] unsigned int* frames);
    HRESULT SetRate([in] unsigned int frames);
    HRESULT GetLogoRate([out] unsigned int* frames);
    HRESULT SetLogoRate([in] unsigned int frames);
    HRESULT GetReverse([out] BOOL* reverse);
    HRESULT SetReverse([in] BOOL reverse);
    HRESULT GetFlipFlop([out] BOOL* flipflop);
    HRESULT SetFlipFlop([in] BOOL flipflop);
    HRESULT GetStyle([out] BMDSwitcherDVETransitionStyle* style);
    HRESULT SetStyle([in] BMDSwitcherDVETransitionStyle style);
    HRESULT GetInputFill([out] BMDSwitcherInputId* input);
    HRESULT SetInputFill([in] BMDSwitcherInputId input);
    HRESULT GetInputCut([out] BMDSwitcherInputId* input);
    HRESULT SetInputCut([in] BMDSwitcherInputId input);
    HRESULT GetEnableKey([out] BOOL* enableKey);
    HRESULT SetEnableKey([in] BOOL enableKey);
    HRESULT GetPreMultiplied([out] BOOL* preMultiplied);
    HRESULT SetPreMultiplied([in] BOOL preMultiplied);
    HRESULT GetClip([out] double* clip);
    HRESULT SetClip([in] double clip);
    HRESULT GetGain([out] double* gain);
    HRESULT SetGain([in] double gain);
    HRESULT GetInverse([out] BOOL* inverse);
    HRESULT SetInverse([in] BOOL inverse);
    HRESULT AddCallback([in] IBMDSwitcherTransitionDVEParametersCallback* callback);
    HRESULT RemoveCallback([in] IBMDSwitcherTransitionDVEParametersCallback* callback);
};

/* Interface IBMDSwitcherKey_v4_1_3 - Key Object */

[
    object,
    uuid(918E234D-67C1-452F-80A0-DB39FE6BCB21),
    helpstring("Key Object")
] interface IBMDSwitcherKey_v4_1_3 : IUnknown
{
    HRESULT GetType([out] BMDSwitcherKeyType* type);
    HRESULT SetType([in] BMDSwitcherKeyType type);
    HRESULT GetInputCut([out] BMDSwitcherInputId* input);
    HRESULT SetInputCut([in] BMDSwitcherInputId input);
    HRESULT GetInputFill([out] BMDSwitcherInputId* input);
    HRESULT SetInputFill([in] BMDSwitcherInputId input);
    HRESULT GetOnAir([out] BOOL* onAir);
    HRESULT SetOnAir([in] BOOL onAir);
    HRESULT CanBeDVEKey([out] BOOL* canDVE);
    HRESULT GetMasked([out] BOOL* maskEnabled);
    HRESULT SetMasked([in] BOOL maskEnabled);
    HRESULT GetMaskTop([out] double* top);
    HRESULT SetMaskTop([in] double top);
    HRESULT GetMaskBottom([out] double* bottom);
    HRESULT SetMaskBottom([in] double bottom);
    HRESULT GetMaskLeft([out] double* left);
    HRESULT SetMaskLeft([in] double left);
    HRESULT GetMaskRight([out] double* right);
    HRESULT SetMaskRight([in] double right);
    HRESULT ResetMask(void);
    HRESULT GetTransitionSelectionMask([out] BMDSwitcherTransitionSelection* selectionMask);
    HRESULT AddCallback([in] IBMDSwitcherKeyCallback* callback);
    HRESULT RemoveCallback([in] IBMDSwitcherKeyCallback* callback);
};

/* Interface IBMDSwitcherKeyIterator_v4_1_3 - Key Iterator */

[
    object,
    uuid(EFD545AE-2879-412B-84B7-17A04E4707ED),
    helpstring("Key Iterator")
] interface IBMDSwitcherKeyIterator_v4_1_3 : IUnknown
{
    HRESULT Next([out] IBMDSwitcherKey_v4_1_3** key);
};

/* Interface IBMDSwitcherInputSuperSource_v4_1_3 - SuperSource Input Object */

[
    object,
    uuid(327DBE95-F003-409E-8FEB-D9C624C439BC),
    helpstring("SuperSource Input Object")
] interface IBMDSwitcherInputSuperSource_v4_1_3 : IUnknown
{
    HRESULT GetInputCut([out] BMDSwitcherInputId* input);
    HRESULT SetInputCut([in] BMDSwitcherInputId input);
    HRESULT GetInputFill([out] BMDSwitcherInputId* input);
    HRESULT SetInputFill([in] BMDSwitcherInputId input);
    HRESULT GetArtOption([out] BMDSwitcherSuperSourceArtOption* artOption);
    HRESULT SetArtOption([in] BMDSwitcherSuperSourceArtOption artOption);
    HRESULT GetPreMultiplied([out] BOOL* preMultiplied);
    HRESULT SetPreMultiplied([in] BOOL preMultiplied);
    HRESULT GetClip([out] double* clip);
    HRESULT SetClip([in] double clip);
    HRESULT GetGain([out] double* gain);
    HRESULT SetGain([in] double gain);
    HRESULT GetInverse([out] BOOL* inverse);
    HRESULT SetInverse([in] BOOL inverse);
    HRESULT GetInputAvailabilityMask([out] BMDSwitcherInputAvailability* mask);
    HRESULT GetBorderEnabled([out] BOOL* enabled);
    HRESULT SetBorderEnabled([in] BOOL enabled);
    HRESULT GetBorderBevel([out] BMDSwitcherBorderBevelOption* bevelOption);
    HRESULT SetBorderBevel([in] BMDSwitcherBorderBevelOption bevelOption);
    HRESULT GetBorderWidthOut([out] double* widthOut);
    HRESULT SetBorderWidthOut([in] double widthOut);
    HRESULT GetBorderWidthIn([out] double* widthIn);
    HRESULT SetBorderWidthIn([in] double widthIn);
    HRESULT GetBorderSoftnessOut([out] double* softnessOut);
    HRESULT SetBorderSoftnessOut([in] double softnessOut);
    HRESULT GetBorderSoftnessIn([out] double* softnessIn);
    HRESULT SetBorderSoftnessIn([in] double softnessIn);
    HRESULT GetBorderBevelSoftness([out] double* bevelSoftness);
    HRESULT SetBorderBevelSoftness([in] double bevelSoftness);
    HRESULT GetBorderBevelPosition([out] double* bevelPosition);
    HRESULT SetBorderBevelPosition([in] double bevelPosition);
    HRESULT GetBorderHue([out] double* hue);
    HRESULT SetBorderHue([in] double hue);
    HRESULT GetBorderSaturation([out] double* sat);
    HRESULT SetBorderSaturation([in] double sat);
    HRESULT GetBorderLuma([out] double* luma);
    HRESULT SetBorderLuma([in] double luma);
    HRESULT GetBorderLightSourceDirection([out] double* degrees);
    HRESULT SetBorderLightSourceDirection([in] double degrees);
    HRESULT GetBorderLightSourceAltitude([out] double* altitude);
    HRESULT SetBorderLightSourceAltitude([in] double altitude);
    HRESULT AddCallback([in] IBMDSwitcherInputSuperSourceCallback_v7_5_2* callback);
    HRESULT RemoveCallback([in] IBMDSwitcherInputSuperSourceCallback_v7_5_2* callback);
    HRESULT CreateIterator([in] REFIID iid, [out] LPVOID* ppv);
};

/* Interface IBMDSwitcherDownstreamKey_v4_1_3 - Downstream Key Object */

[
    object,
    uuid(6D10D51E-71FA-4031-BC13-95BE3653D0E6),
    helpstring("Downstream Key Object")
] interface IBMDSwitcherDownstreamKey_v4_1_3 : IUnknown
{
    HRESULT GetInputCut([out] BMDSwitcherInputId* input);
    HRESULT SetInputCut([in] BMDSwitcherInputId input);
    HRESULT GetInputFill([out] BMDSwitcherInputId* input);
    HRESULT SetInputFill([in] BMDSwitcherInputId input);
    HRESULT GetTie([out] BOOL* tie);
    HRESULT SetTie([in] BOOL tie);
    HRESULT GetRate([out] unsigned int* frames);
    HRESULT SetRate([in] unsigned int frames);
    HRESULT GetOnAir([out] BOOL* onAir);
    HRESULT SetOnAir([in] BOOL onAir);
    HRESULT PerformAutoTransition(void);
    HRESULT IsTransitioning([out] BOOL* isTransitioning);
    HRESULT IsAutoTransitioning([out] BOOL* isAutoTransitioning);
    HRESULT GetFramesRemaining([out] unsigned int* framesRemaining);
    HRESULT GetPreMultiplied([out] BOOL* preMultiplied);
    HRESULT SetPreMultiplied([in] BOOL preMultiplied);
    HRESULT GetClip([out] double* clip);
    HRESULT SetClip([in] double clip);
    HRESULT GetGain([out] double* gain);
    HRESULT SetGain([in] double gain);
    HRESULT GetInverse([out] BOOL* inverse);
    HRESULT SetInverse([in] BOOL inverse);
    HRESULT GetMasked([out] BOOL* maskEnabled);
    HRESULT SetMasked([in] BOOL maskEnabled);
    HRESULT GetMaskTop([out] double* top);
    HRESULT SetMaskTop([in] double top);
    HRESULT GetMaskBottom([out] double* bottom);
    HRESULT SetMaskBottom([in] double bottom);
    HRESULT GetMaskLeft([out] double* left);
    HRESULT SetMaskLeft([in] double left);
    HRESULT GetMaskRight([out] double* right);
    HRESULT SetMaskRight([in] double right);
    HRESULT ResetMask(void);
    HRESULT GetInputAvailabilityMask([out] BMDSwitcherInputAvailability* availabilityMask);
    HRESULT AddCallback([in] IBMDSwitcherDownstreamKeyCallback* callback);
    HRESULT RemoveCallback([in] IBMDSwitcherDownstreamKeyCallback* callback);
};

/* Interface IBMDSwitcherDownstreamKeyIterator_v4_1_3 - Downstream Key Iterator */

[
    object,
    uuid(FD063042-B7FD-4819-BD1E-809DC380DFE9),
    helpstring("Downstream Key Iterator")
] interface IBMDSwitcherDownstreamKeyIterator_v4_1_3 : IUnknown
{
    HRESULT Next([out] IBMDSwitcherDownstreamKey_v4_1_3** downstreamKey);
};

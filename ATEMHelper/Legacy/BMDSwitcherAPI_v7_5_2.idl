/* -LICENSE-START-
** Copyright (c) 2018 Blackmagic Design
**
** Permission is hereby granted, free of charge, to any person or organization
** obtaining a copy of the software and accompanying documentation covered by
** this license (the "Software") to use, reproduce, display, distribute,
** execute, and transmit the Software, and to prepare derivative works of the
** Software, and to permit third-parties to whom the Software is furnished to
** do so, all subject to the following:
** 
** The copyright notices in the Software and this entire statement, including
** the above license grant, this restriction and the following disclaimer,
** must be included in all copies of the Software, in whole or in part, and
** all derivative works of the Software, unless such copies or derivative
** works are solely in the form of machine-executable object code generated by
** a source language processor.
** 
** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
** DEALINGS IN THE SOFTWARE.
** -LICENSE-END-
*/

/* BMDSwitcherAPI_v7_5_2.idl */

// Forward Declarations

interface IBMDSwitcherMultiView_v7_5_2;
interface IBMDSwitcherMultiViewIterator_v7_5_2;
interface IBMDSwitcherInputSuperSource_v7_5_2;
interface IBMDSwitcherInputSuperSourceCallback_v7_5_2;
interface IBMDSwitcher_v7_5_2;
interface IBMDSwitcherDiscovery_v7_5_2;
interface IBMDSwitcherTalkback_v7_5_2;
interface IBMDSwitcherMixMinusOutput_v7_5_2;
interface IBMDSwitcherMixMinusOutputIterator_v7_5_2;

/* Enum BMDSwitcherMultiViewLayout - Layout for MultiView */

typedef [v1_enum] enum	_BMDSwitcherMultiViewLayout_v7_5_2 {
    bmdSwitcherMultiViewLayoutProgramTop_v7_5_2                         = /* 'mvpt' */ 0x6D767074,
    bmdSwitcherMultiViewLayoutProgramBottom_v7_5_2                      = /* 'mvpb' */ 0x6D767062,
    bmdSwitcherMultiViewLayoutProgramLeft_v7_5_2                        = /* 'mvpl' */ 0x6D76706C,
    bmdSwitcherMultiViewLayoutProgramRight_v7_5_2                       = /* 'mvpr' */ 0x6D767072
} BMDSwitcherMultiViewLayout_v7_5_2;

/* Enum BMDSwitcherInputSuperSourceEventType_v7_5_2 - Used in IBMDSwitcherInputSuperSourceCallback_v7_5_2 */

typedef [v1_enum] enum  _BMDSwitcherInputSuperSourceEventType_v7_5_2 {
    bmdSwitcherInputSuperSourceEventTypeInputFillChanged_v7_5_2                  = /* 'ipfC' */ 0x69706643,
    bmdSwitcherInputSuperSourceEventTypeInputCutChanged_v7_5_2                   = /* 'ipcC' */ 0x69706343,
    bmdSwitcherInputSuperSourceEventTypeArtOptionChanged_v7_5_2                  = /* 'atoC' */ 0x61746F43,
    bmdSwitcherInputSuperSourceEventTypePreMultipliedChanged_v7_5_2              = /* 'shpC' */ 0x73687043,
    bmdSwitcherInputSuperSourceEventTypeClipChanged_v7_5_2                       = /* 'clpC' */ 0x636C7043,
    bmdSwitcherInputSuperSourceEventTypeGainChanged_v7_5_2                       = /* 'ganC' */ 0x67616E43,
    bmdSwitcherInputSuperSourceEventTypeInverseChanged_v7_5_2                    = /* 'invC' */ 0x696E7643,
    bmdSwitcherInputSuperSourceEventTypeBorderEnabledChanged_v7_5_2              = /* 'enbC' */ 0x656E6243,
    bmdSwitcherInputSuperSourceEventTypeBorderBevelChanged_v7_5_2                = /* 'bvlC' */ 0x62766C43,
    bmdSwitcherInputSuperSourceEventTypeBorderWidthOutChanged_v7_5_2             = /* 'wdoC' */ 0x77646F43,
    bmdSwitcherInputSuperSourceEventTypeBorderWidthInChanged_v7_5_2              = /* 'wdiC' */ 0x77646943,
    bmdSwitcherInputSuperSourceEventTypeBorderSoftnessOutChanged_v7_5_2          = /* 'sfoC' */ 0x73666F43,
    bmdSwitcherInputSuperSourceEventTypeBorderSoftnessInChanged_v7_5_2           = /* 'sfiC' */ 0x73666943,
    bmdSwitcherInputSuperSourceEventTypeBorderBevelSoftnessChanged_v7_5_2        = /* 'bvsC' */ 0x62767343,
    bmdSwitcherInputSuperSourceEventTypeBorderBevelPositionChanged_v7_5_2        = /* 'bvpC' */ 0x62767043,
    bmdSwitcherInputSuperSourceEventTypeBorderHueChanged_v7_5_2                  = /* 'hueC' */ 0x68756543,
    bmdSwitcherInputSuperSourceEventTypeBorderSaturationChanged_v7_5_2           = /* 'satC' */ 0x73617443,
    bmdSwitcherInputSuperSourceEventTypeBorderLumaChanged_v7_5_2                 = /* 'lumC' */ 0x6C756D43,
    bmdSwitcherInputSuperSourceEventTypeBorderLightSourceDirectionChanged_v7_5_2 = /* 'lsdC' */ 0x6C736443,
    bmdSwitcherInputSuperSourceEventTypeBorderLightSourceAltitudeChanged_v7_5_2  = /* 'lsaC' */ 0x6C736143
} BMDSwitcherInputSuperSourceEventType_v7_5_2;

/* Enum BMDSwitcherMixMinusOutputAudioMode_v7_5_2 - Mix-Minus Output Audio Mode */

typedef [v1_enum] enum	_BMDSwitcherMixMinusOutputAudioMode_v7_5_2 {
	bmdSwitcherMixMinusOutputAudioModeProgramOut_v7_5_2           = /* 'mmop' */ 0x6D6D6F70,
	bmdSwitcherMixMinusOutputAudioModeMixMinus_v7_5_2             = /* 'mmom' */ 0x6D6D6F6D
} BMDSwitcherMixMinusOutputAudioMode_v7_5_2;

/* Interface IBMDSwitcherMultiView_v7_5_2 - MultiView Object */

[
    object,
    uuid(68083082-4FBF-429C-9FD0-4A73D8B9FD93),
    helpstring("MultiView Object v7.5.2")
] interface IBMDSwitcherMultiView_v7_5_2 : IUnknown
{
    HRESULT GetLayout([out] BMDSwitcherMultiViewLayout_v7_5_2* layout);
    HRESULT SetLayout([in] BMDSwitcherMultiViewLayout_v7_5_2 layout);
    HRESULT GetWindowInput([in] unsigned int window, [out] BMDSwitcherInputId* input);
    HRESULT SetWindowInput([in] unsigned int window, [in] BMDSwitcherInputId input);
    HRESULT GetWindowCount([out] unsigned int* windowCount);
    HRESULT GetInputAvailabilityMask([out] BMDSwitcherInputAvailability* availabilityMask);
    HRESULT CanRouteInputs([out] BOOL* canRoute);
    HRESULT SupportsVuMeters([out] BOOL* supportsVuMeters);
    HRESULT CurrentInputSupportsVuMeter([in] unsigned int window, [out] BOOL* supportsVuMeter);
    HRESULT GetVuMeterEnabled([in] unsigned int window, [out] BOOL* enabled);
    HRESULT SetVuMeterEnabled([in] unsigned int window, [in] BOOL enabled);
    HRESULT GetVuMeterOpacity([out] double* opacity);
    HRESULT SetVuMeterOpacity([in] double opacity);
    HRESULT CanToggleSafeAreaEnabled([out] BOOL* canToggleSafeAreaEnabled);
    HRESULT GetSafeAreaEnabled([out] BOOL* enabled);
    HRESULT SetSafeAreaEnabled([in] BOOL enabled);
    HRESULT SupportsProgramPreviewSwap([out] BOOL* supportsProgramPreviewSwap);
    HRESULT GetProgramPreviewSwapped([out] BOOL* swapped);
    HRESULT SetProgramPreviewSwapped([in] BOOL swapped);
    HRESULT AddCallback([in] IBMDSwitcherMultiViewCallback* callback);
    HRESULT RemoveCallback([in] IBMDSwitcherMultiViewCallback* callback);
};

/* Interface IBMDSwitcherMultiViewIterator_v7_5_2 - MultiView Iterator */

[
    object,
    uuid(B7A0D98B-A286-4651-A9E7-5596F62D652E),
    helpstring("MultiView Iterator v7.5.2")
] interface IBMDSwitcherMultiViewIterator_v7_5_2 : IUnknown
{
    HRESULT Next([out] IBMDSwitcherMultiView_v7_5_2** multiView);
};

/* Interface IBMDSwitcherInputSuperSource_v7_5_2 - SuperSource Input Object */

[
    object,
    uuid(5051EFAA-DFE6-4A9E-9F5D-9356707F1D28),
    helpstring("SuperSource Input Object v7.5.2")
] interface IBMDSwitcherInputSuperSource_v7_5_2 : IUnknown
{
    HRESULT GetInputCut([out] BMDSwitcherInputId* input);
    HRESULT SetInputCut([in] BMDSwitcherInputId input);
    HRESULT GetInputFill([out] BMDSwitcherInputId* input);
    HRESULT SetInputFill([in] BMDSwitcherInputId input);
    HRESULT GetCutInputAvailabilityMask([out] BMDSwitcherInputAvailability* mask);
    HRESULT GetFillInputAvailabilityMask([out] BMDSwitcherInputAvailability* mask);
    HRESULT GetArtOption([out] BMDSwitcherSuperSourceArtOption* artOption);
    HRESULT SetArtOption([in] BMDSwitcherSuperSourceArtOption artOption);
    HRESULT GetPreMultiplied([out] BOOL* preMultiplied);
    HRESULT SetPreMultiplied([in] BOOL preMultiplied);
    HRESULT GetClip([out] double* clip);
    HRESULT SetClip([in] double clip);
    HRESULT GetGain([out] double* gain);
    HRESULT SetGain([in] double gain);
    HRESULT GetInverse([out] BOOL* inverse);
    HRESULT SetInverse([in] BOOL inverse);
    HRESULT GetBorderEnabled([out] BOOL* enabled);
    HRESULT SetBorderEnabled([in] BOOL enabled);
    HRESULT GetBorderBevel([out] BMDSwitcherBorderBevelOption* bevelOption);
    HRESULT SetBorderBevel([in] BMDSwitcherBorderBevelOption bevelOption);
    HRESULT GetBorderWidthOut([out] double* widthOut);
    HRESULT SetBorderWidthOut([in] double widthOut);
    HRESULT GetBorderWidthIn([out] double* widthIn);
    HRESULT SetBorderWidthIn([in] double widthIn);
    HRESULT GetBorderSoftnessOut([out] double* softnessOut);
    HRESULT SetBorderSoftnessOut([in] double softnessOut);
    HRESULT GetBorderSoftnessIn([out] double* softnessIn);
    HRESULT SetBorderSoftnessIn([in] double softnessIn);
    HRESULT GetBorderBevelSoftness([out] double* bevelSoftness);
    HRESULT SetBorderBevelSoftness([in] double bevelSoftness);
    HRESULT GetBorderBevelPosition([out] double* bevelPosition);
    HRESULT SetBorderBevelPosition([in] double bevelPosition);
    HRESULT GetBorderHue([out] double* hue /* [0, 360) */);
    HRESULT SetBorderHue([in] double hue /* [0, 360) */);
    HRESULT GetBorderSaturation([out] double* sat);
    HRESULT SetBorderSaturation([in] double sat);
    HRESULT GetBorderLuma([out] double* luma);
    HRESULT SetBorderLuma([in] double luma);
    HRESULT GetBorderLightSourceDirection([out] double* degrees);
    HRESULT SetBorderLightSourceDirection([in] double degrees);
    HRESULT GetBorderLightSourceAltitude([out] double* altitude);
    HRESULT SetBorderLightSourceAltitude([in] double altitude);
    HRESULT AddCallback([in] IBMDSwitcherInputSuperSourceCallback_v7_5_2* callback);
    HRESULT RemoveCallback([in] IBMDSwitcherInputSuperSourceCallback_v7_5_2* callback);
    HRESULT CreateIterator([in] REFIID iid, [out] LPVOID* ppv);
};

/* Interface IBMDSwitcherInputSuperSourceCallback_v7_5_2 - SuperSource Input Object Callback */

[
    object,
    uuid(6B02A84C-0085-4593-973A-5E458079BD16),
    helpstring("SuperSource Input Object Callback v7.5.2")
] interface IBMDSwitcherInputSuperSourceCallback_v7_5_2 : IUnknown
{
    HRESULT Notify([in] BMDSwitcherInputSuperSourceEventType_v7_5_2 eventType);
};

/* Interface IBMDSwitcher_v7_5_2 - Switcher Object */

[
    object,
    uuid(3D480E2F-3CF4-474B-92E7-B7907EE83B41),
    helpstring("Switcher Object v7.5.2")
] interface IBMDSwitcher_v7_5_2 : IUnknown
{
    HRESULT GetProductName([out] BSTR* productName);
    HRESULT GetVideoMode([out] BMDSwitcherVideoMode* videoMode);
    HRESULT SetVideoMode([in] BMDSwitcherVideoMode videoMode);
    HRESULT DoesSupportVideoMode([in] BMDSwitcherVideoMode videoMode, [out] BOOL* supported);
    HRESULT GetMethodForDownConvertedSD([out] BMDSwitcherDownConversionMethod* method);
    HRESULT SetMethodForDownConvertedSD([in] BMDSwitcherDownConversionMethod method);
    HRESULT GetDownConvertedHDVideoMode([in] BMDSwitcherVideoMode coreVideoMode, [out] BMDSwitcherVideoMode* downConvertedHDVideoMode);
    HRESULT SetDownConvertedHDVideoMode([in] BMDSwitcherVideoMode coreVideoMode, [in] BMDSwitcherVideoMode downConvertedHDVideoMode);
    HRESULT DoesSupportDownConvertedHDVideoMode([in] BMDSwitcherVideoMode coreVideoMode, [in] BMDSwitcherVideoMode downConvertedHDVideoMode, [out] BOOL* supported);
    HRESULT GetMultiViewVideoMode([in] BMDSwitcherVideoMode coreVideoMode, [out] BMDSwitcherVideoMode* multiviewVideoMode);
    HRESULT SetMultiViewVideoMode([in] BMDSwitcherVideoMode coreVideoMode, [in] BMDSwitcherVideoMode multiviewVideoMode);
    HRESULT DoesSupportMultiViewVideoMode([in] BMDSwitcherVideoMode coreVideoMode, [in] BMDSwitcherVideoMode multiviewVideoMode, [out] BOOL* supported);
    HRESULT Get3GSDIOutputLevel([out] BMDSwitcher3GSDIOutputLevel* outputLevel);
    HRESULT Set3GSDIOutputLevel([in] BMDSwitcher3GSDIOutputLevel outputLevel);
    HRESULT GetPowerStatus([out] BMDSwitcherPowerStatus* powerStatus);
    HRESULT CreateIterator([in] REFIID iid, [out] LPVOID* ppv);
    HRESULT AddCallback([in] IBMDSwitcherCallback* callback);
    HRESULT RemoveCallback([in] IBMDSwitcherCallback* callback);
};

/* Interface IBMDSwitcherDiscovery_v7_5_2 - Used to discover and connect to switchers */

[
    object,
    uuid(2CEFAB87-89E6-442F-A4F6-8FE63A50E17E),
    helpstring("Used to discover and connect to switchers v7.5_2")
] interface IBMDSwitcherDiscovery_v7_5_2 : IUnknown
{
    HRESULT ConnectTo([in] BSTR deviceAddress, [out] IBMDSwitcher_v7_5_2** switcherDevice, [out] BMDSwitcherConnectToFailure* failReason);
};

/* Interface IBMDSwitcherTalkback_v7_5_2 - Talkback Object */

[
    object,
    uuid(92220740-F63B-43A8-8D51-5B85901B4847),
    helpstring("Talkback Object v7.5.2")
] interface IBMDSwitcherTalkback_v7_5_2 : IUnknown
{
    HRESULT GetMuteSDI([out] BOOL* muteSDI);
    HRESULT SetMuteSDI([in] BOOL muteSDI);
    HRESULT InputCanMuteSDI([in] BMDSwitcherAudioInputId audioInputId, [out] BOOL* canMuteSDI);
    HRESULT CurrentInputSupportsMuteSDI([in] BMDSwitcherAudioInputId audioInputId, [out] BOOL* supportsMuteSDI);
    HRESULT GetInputMuteSDI([in] BMDSwitcherAudioInputId audioInputId, [out] BOOL* muteSDI);
    HRESULT SetInputMuteSDI([in] BMDSwitcherAudioInputId audioInputId, [in] BOOL muteSDI);
    HRESULT AddCallback([in] IBMDSwitcherTalkbackCallback* callback);
    HRESULT RemoveCallback([in] IBMDSwitcherTalkbackCallback* callback);
};
/* Coclasses */

importlib("stdole2.tlb");

[
    uuid(BA726CE9-B8F5-4B1B-AA00-1A2DF3998B45),
    helpstring("CBMDSwitcherDiscovery Class v7.5.2")
] coclass CBMDSwitcherDiscovery_v7_5_2
{
    [default] interface IBMDSwitcherDiscovery_v7_5_2;
};

/* Interface IBMDSwitcherMixMinusOutput_v7_5_2 - Mix-Minus Output Object */

[
	object,
	uuid(E787458F-FCF4-4A9B-83D9-E25188170742),
	helpstring("Mix-Minus Output Object v7.5.2")
] interface IBMDSwitcherMixMinusOutput_v7_5_2 : IUnknown
{
	HRESULT GetAudioMode([out] BMDSwitcherMixMinusOutputAudioMode_v7_5_2* audioMode);
	HRESULT SetAudioMode([in] BMDSwitcherMixMinusOutputAudioMode_v7_5_2 audioMode);
	HRESULT GetMinusAudioInputId([out] BMDSwitcherAudioInputId* audioInputId);
	HRESULT AddCallback([in] IBMDSwitcherMixMinusOutputCallback* callback);
	HRESULT RemoveCallback([in] IBMDSwitcherMixMinusOutputCallback* callback);
};

/* Interface IBMDSwitcherMixMinusOutputIterator_v7_5_2 - Mix-Minus Output Iterator */

[
	object,
	uuid(C878F9F2-116D-48D4-9BBF-CA03447EA9A7),
	helpstring("Mix-Minus Output Iterator v7_5_2")
] interface IBMDSwitcherMixMinusOutputIterator_v7_5_2 : IUnknown
{
	HRESULT Next([out] IBMDSwitcherMixMinusOutput_v7_5_2** mixMinusOutput);
};

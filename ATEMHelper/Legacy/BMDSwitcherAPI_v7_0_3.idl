/* -LICENSE-START-
** Copyright (c) 2017 Blackmagic Design
**
** Permission is hereby granted, free of charge, to any person or organization
** obtaining a copy of the software and accompanying documentation covered by
** this license (the "Software") to use, reproduce, display, distribute,
** execute, and transmit the Software, and to prepare derivative works of the
** Software, and to permit third-parties to whom the Software is furnished to
** do so, all subject to the following:
**
** The copyright notices in the Software and this entire statement, including
** the above license grant, this restriction and the following disclaimer,
** must be included in all copies of the Software, in whole or in part, and
** all derivative works of the Software, unless such copies or derivative
** works are solely in the form of machine-executable object code generated by
** a source language processor.
**
** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
** DEALINGS IN THE SOFTWARE.
** -LICENSE-END-
*/

/* BMDSwitcherAPI_v7_0_3.idl */

// Forward Declarations

interface IBMDSwitcherCameraControl_v7_0_3;

/* Interface IBMDSwitcherCameraControl_v7_0_3 - Switcher Camera Control Object */

[
	object,
	uuid(95D7C0B6-9A84-4715-BE27-8A9CCAA9E6A9),
	helpstring("Switcher Camera Control Object")
] interface IBMDSwitcherCameraControl_v7_0_3 : IUnknown
{
	HRESULT CreateIterator([in] REFIID iid, [out] LPVOID* ppv);
	HRESULT GetPeriodicFlushInterval([out] unsigned int* intervalMs /* In milliseconds */);
	HRESULT SetPeriodicFlushInterval([in] unsigned int intervalMs /* In milliseconds */);
	HRESULT GetParameterInfo([in] unsigned int destinationDevice, [in] unsigned int category, [in] unsigned int parameter, [out] BMDSwitcherCameraControlParameterType* type, [out] unsigned int* count);
	HRESULT GetParameterPeriodicFlushEnabled([in] unsigned int destinationDevice, [in] unsigned int category, [in] unsigned int parameter, [out] BOOL* enabled);
	HRESULT SetParameterPeriodicFlushEnabled([in] unsigned int destinationDevice, [in] unsigned int category, [in] unsigned int parameter, [in] BOOL enabled);
	HRESULT SetFlags([in] unsigned int destinationDevice, [in] unsigned int category, [in] unsigned int parameter, [in] unsigned int count, [in] const BOOL* values);
	HRESULT ToggleFlags([in] unsigned int destinationDevice, [in] unsigned int category, [in] unsigned int parameter, [in] unsigned int count, [in] const BOOL* values);
	HRESULT GetFlags([in] unsigned int destinationDevice, [in] unsigned int category, [in] unsigned int parameter, [in, out] unsigned int* count, [out] BOOL* values);
	HRESULT SetBytes([in] unsigned int destinationDevice, [in] unsigned int category, [in] unsigned int parameter, [in] unsigned int count, [in] const signed char* bytes);
	HRESULT OffsetBytes([in] unsigned int destinationDevice, [in] unsigned int category, [in] unsigned int parameter, [in] unsigned int count, [in] const signed char* bytes);
	HRESULT GetBytes([in] unsigned int destinationDevice, [in] unsigned int category, [in] unsigned int parameter, [in, out] unsigned int* count, [out] signed char* bytes);
	HRESULT SetInt16s([in] unsigned int destinationDevice, [in] unsigned int category, [in] unsigned int parameter, [in] unsigned int count, [in] const short* values);
	HRESULT OffsetInt16s([in] unsigned int destinationDevice, [in] unsigned int category, [in] unsigned int parameter, [in] unsigned int count, [in] const short* values);
	HRESULT GetInt16s([in] unsigned int destinationDevice, [in] unsigned int category, [in] unsigned int parameter, [in, out] unsigned int* count, [out] short* values);
	HRESULT SetInt32s([in] unsigned int destinationDevice, [in] unsigned int category, [in] unsigned int parameter, [in] unsigned int count, [in] const int* values);
	HRESULT OffsetInt32s([in] unsigned int destinationDevice, [in] unsigned int category, [in] unsigned int parameter, [in] unsigned int count, [in] const int* values);
	HRESULT GetInt32s([in] unsigned int destinationDevice, [in] unsigned int category, [in] unsigned int parameter, [in, out] unsigned int* count, [out] int* values);
	HRESULT SetInt64s([in] unsigned int destinationDevice, [in] unsigned int category, [in] unsigned int parameter, [in] unsigned int count, [in] const long long* values);
	HRESULT OffsetInt64s([in] unsigned int destinationDevice, [in] unsigned int category, [in] unsigned int parameter, [in] unsigned int count, [in] const long long* values);
	HRESULT GetInt64s([in] unsigned int destinationDevice, [in] unsigned int category, [in] unsigned int parameter, [in, out] unsigned int* count, [out] long long* values);
	HRESULT OffsetFloats([in] unsigned int destinationDevice, [in] unsigned int category, [in] unsigned int parameter, [in] unsigned int count, [in] const double* values);
	HRESULT SetFloats([in] unsigned int destinationDevice, [in] unsigned int category, [in] unsigned int parameter, [in] unsigned int count, [in] const double* values);
	HRESULT GetFloats([in] unsigned int destinationDevice, [in] unsigned int category, [in] unsigned int parameter, [in, out] unsigned int* count, [out] double* values);
	HRESULT AddCallback([in] IBMDSwitcherCameraControlCallback* callback);
	HRESULT RemoveCallback([in] IBMDSwitcherCameraControlCallback* callback);
};

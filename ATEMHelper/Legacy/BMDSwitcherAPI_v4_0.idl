/* -LICENSE-START-
** Copyright (c) 2013 Blackmagic Design
**
** Permission is hereby granted, free of charge, to any person or organization
** obtaining a copy of the software and accompanying documentation covered by
** this license (the "Software") to use, reproduce, display, distribute,
** execute, and transmit the Software, and to prepare derivative works of the
** Software, and to permit third-parties to whom the Software is furnished to
** do so, all subject to the following:
** 
** The copyright notices in the Software and this entire statement, including
** the above license grant, this restriction and the following disclaimer,
** must be included in all copies of the Software, in whole or in part, and
** all derivative works of the Software, unless such copies or derivative
** works are solely in the form of machine-executable object code generated by
** a source language processor.
** 
** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
** DEALINGS IN THE SOFTWARE.
** -LICENSE-END-
*/


/* BMDSwitcherAPI_v4_0.idl */

/* Enum BMDSwitcherPropertyId_v4_0 - IBMDSwitcher_v4_0 Property ID */

typedef [v1_enum] enum	_BMDSwitcherPropertyId_v4_0 {
    bmdSwitcherPropertyIdProductName_v4_0                             = /* 'pdnm' */ 0x70646E6D,	// String type, Get only
    bmdSwitcherPropertyIdVideoMode_v4_0                               = /* 'vdmd' */ 0x76646D64,	// Int type (BMDSwitcherVideoMode), Get/Set
    bmdSwitcherPropertyIdDownConvertMode_v4_0                         = /* 'dcmd' */ 0x64636D64,	// Int type (BMDSwitcherDownConverterMode), Get/Set
    bmdSwitcherPropertyIdPowerStatus_v4_0                             = /* 'pwrs' */ 0x70777273	// Int type (BMDSwitcherPowerStatus), Get only
} BMDSwitcherPropertyId_v4_0;

// Forward Declarations

interface IBMDSwitcher_v4_0;
interface IBMDSwitcherDiscovery_v4_0;
interface IBMDSwitcherCallback_v4_0;
interface IBMDSwitcherStills_v4_0;
interface IBMDSwitcherClip_v4_0;
interface IBMDSwitcherMediaPool_v4_0;
interface IBMDSwitcherAudioInput_v4_0;
interface IBMDSwitcherAudioInputIterator_v4_0;

/* Interface IBMDSwitcherCallback_v4_0 - Switcher Callback Delegate */

[
    object,
    uuid(6C6E4441-9421-4729-9951-988659E3A44A),
    helpstring("Switcher Callback Delegate")
] interface IBMDSwitcherCallback_v4_0 : IUnknown
{
    HRESULT PropertyChanged([in] BMDSwitcherPropertyId_v4_0 propertyId);
    HRESULT Disconnected(void);
};

/* Interface IBMDSwitcher_v4_0 - Switcher Object */

[
    object,
    uuid(1E8701D0-258F-43ED-9EDC-434FD16E922D),
    helpstring("Switcher Object")
] interface IBMDSwitcher_v4_0 : IUnknown
{
    HRESULT CreateIterator([in] REFIID iid, [out] LPVOID* ppv);
    HRESULT AddCallback([in] IBMDSwitcherCallback_v4_0* callback);
    HRESULT RemoveCallback([in] IBMDSwitcherCallback_v4_0* callback);
    HRESULT SetFlag([in] BMDSwitcherPropertyId_v4_0 propertyId, [in] BOOL value);
    HRESULT GetFlag([in] BMDSwitcherPropertyId_v4_0 propertyId, [out] BOOL* value);
    HRESULT SetInt([in] BMDSwitcherPropertyId_v4_0 propertyId, [in] long long value);
    HRESULT GetInt([in] BMDSwitcherPropertyId_v4_0 propertyId, [out] long long* value);
    HRESULT SetFloat([in] BMDSwitcherPropertyId_v4_0 propertyId, [in] double value);
    HRESULT GetFloat([in] BMDSwitcherPropertyId_v4_0 propertyId, [out] double* value);
    HRESULT SetString([in] BMDSwitcherPropertyId_v4_0 propertyId, [in] BSTR value);
    HRESULT GetString([in] BMDSwitcherPropertyId_v4_0 propertyId, [out] BSTR* value);
};

/* Interface IBMDSwitcherDiscovery_v4_0 - Used to discover and connect to switchers */

[
    object,
    uuid(A676047A-D3A4-44B1-B8B5-31D7289D266A),
    helpstring("Used to discover and connect to switchers")
] interface IBMDSwitcherDiscovery_v4_0 : IUnknown
{
    HRESULT ConnectTo([in] BSTR deviceAddress, [out] IBMDSwitcher_v4_0** switcherDevice, [out] BMDSwitcherConnectToFailure* failReason);
};

/* Interface IBMDSwitcherStills_v4_0 - Stills */

[
    object,
    uuid(AA26D656-2400-407B-8D3C-796B506F99DB),
    helpstring("Stills")
] interface IBMDSwitcherStills_v4_0 : IUnknown
{
    HRESULT GetCount([out] unsigned int* count);
    HRESULT IsValid([in] unsigned int index, [out] BOOL* valid);
    HRESULT GetName([in] unsigned int index, [out] BSTR* name);
    HRESULT GetHash([in] unsigned int index, [out] BMDSwitcherHash* hash);
    HRESULT SetInvalid([in] unsigned int index);
    HRESULT Lock([in] IBMDSwitcherLockCallback* lockCallback);
    HRESULT Unlock([in] IBMDSwitcherLockCallback* lockCallback);
    HRESULT Upload([in] unsigned int index, [in] BSTR name, [in] IBMDSwitcherFrame* frame);
    HRESULT Download([in] unsigned int index);
    HRESULT CancelTransfer(void);
    HRESULT GetProgress([out] double* progress);
    HRESULT AddCallback([in] IBMDSwitcherStillsCallback* callback);
    HRESULT RemoveCallback([in] IBMDSwitcherStillsCallback* callback);
};

/* Interface IBMDSwitcherClip_v4_0 - Clip */

[
    object,
    uuid(3CC10CA1-3E13-4C69-9FFC-A37A62B05869),
    helpstring("Clip")
] interface IBMDSwitcherClip_v4_0 : IUnknown
{
    HRESULT GetIndex([out] unsigned int* index);
    HRESULT IsValid([out] BOOL* valid);
    HRESULT GetName([out] BSTR* name);
    HRESULT SetValid([in] BSTR name, [in] unsigned int frameCount);
    HRESULT SetInvalid(void);
    HRESULT GetFrameCount([out] unsigned int* frameCount);
    HRESULT GetMaxFrameCount([out] unsigned int* maxFrameCount);
    HRESULT IsFrameValid([in] unsigned int frameIndex, [out] BOOL* valid);
    HRESULT GetFrameHash([in] unsigned int frameIndex, [out] BMDSwitcherHash* hash);
    HRESULT IsAudioValid([out] BOOL* valid);
    HRESULT GetAudioName([out] BSTR* name);
    HRESULT GetAudioHash([out] BMDSwitcherHash* hash);
    HRESULT SetAudioInvalid(void);
    HRESULT Lock([in] IBMDSwitcherLockCallback* lockCallback);
    HRESULT Unlock([in] IBMDSwitcherLockCallback* lockCallback);
    HRESULT UploadFrame([in] unsigned int frameIndex, [in] IBMDSwitcherFrame* frame);
    HRESULT DownloadFrame([in] unsigned int frameIndex);
    HRESULT UploadAudio([in] BSTR name, [in] IBMDSwitcherAudio* audio);
    HRESULT DownloadAudio(void);
    HRESULT CancelTransfer(void);
    HRESULT GetProgress([out] double* progress);
    HRESULT AddCallback([in] IBMDSwitcherClipCallback* callback);
    HRESULT RemoveCallback([in] IBMDSwitcherClipCallback* callback);
};

/* Interface IBMDSwitcherMediaPool_v4_0 - Frame Pool for Media Players */

[
    object,
    uuid(D9B2A1E7-023E-42EC-96C9-5FFE28CE8399),
    helpstring("Frame Pool for Media Players")
] interface IBMDSwitcherMediaPool_v4_0 : IUnknown
{
    HRESULT GetStills([out] IBMDSwitcherStills_v4_0** stills);
    HRESULT GetClip([in] unsigned int clipIndex, [out] IBMDSwitcherClip_v4_0** clip);
    HRESULT GetClipCount([out] unsigned int* clipCount);
    HRESULT CreateFrame([in] BMDSwitcherPixelFormat pixelFormat, [in] unsigned int width, [in] unsigned int height, [out] IBMDSwitcherFrame** frame);
    HRESULT CreateAudio([in] unsigned int sizeBytes, [out] IBMDSwitcherAudio** audio);
    HRESULT GetFrameTotalForClips([out] unsigned int* total);
    HRESULT GetClipMaxFrameCounts([in] unsigned int clipCount, [out] unsigned int* clipMaxFrameCounts); // one array element per clip, each element holds the maximum frame count
    HRESULT SetClipMaxFrameCounts([in] unsigned int clipCount, [in] const unsigned int* clipMaxFrameCounts); // one array element per clip, each element holds the maximum frame count
    HRESULT AddCallback([in] IBMDSwitcherMediaPoolCallback* callback);
    HRESULT RemoveCallback([in] IBMDSwitcherMediaPoolCallback* callback);
};

/* Interface IBMDSwitcherAudioInput_v4_0 - Audio Input Object */

[
    object,
    uuid(87B99021-FA29-4720-9526-4512CA553858),
    helpstring("Audio Input Object")
] interface IBMDSwitcherAudioInput_v4_0 : IUnknown
{
    HRESULT GetType([out] BMDSwitcherAudioInputType* type);
    HRESULT GetMixOption([out] BMDSwitcherAudioMixOption* mixOption);
    HRESULT SetMixOption([in] BMDSwitcherAudioMixOption mixOption);
    HRESULT GetGain([out] double* gain);
    HRESULT SetGain([in] double gain);
    HRESULT GetBalance([out] double* balance);
    HRESULT SetBalance([in] double balance);
    HRESULT IsMixedIn([out] BOOL* mixedIn);
    HRESULT GetAudioId([out] BMDSwitcherAudioInputId* audioInputId);
    HRESULT ResetLevelNotificationPeaks(void);
    HRESULT AddCallback([in] IBMDSwitcherAudioInputCallback* callback);
    HRESULT RemoveCallback([in] IBMDSwitcherAudioInputCallback* callback);
};

/* Interface IBMDSwitcherAudioInputIterator_v4_0 - Audio Input Iterator */

[
    object,
    uuid(0194C65A-3EDA-4853-A6D3-D59CD12B3C0A),
    helpstring("Audio Input Iterator")
] interface IBMDSwitcherAudioInputIterator_v4_0 : IUnknown
{
    HRESULT Next([out] IBMDSwitcherAudioInput_v4_0** audioInput);
    HRESULT GetById([in] BMDSwitcherAudioInputId audioInputId, [out] IBMDSwitcherAudioInput_v4_0** audioInput);
};

/* Coclasses */

importlib("stdole2.tlb");

[
    uuid(F2DC5149-9599-47E4-84B9-054C78A1A46D),
    helpstring("CBMDSwitcherDiscovery_v4_0 Class")
] coclass CBMDSwitcherDiscovery_v4_0
{
    [default] interface IBMDSwitcherDiscovery_v4_0;
};
